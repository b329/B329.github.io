<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-22T18:57:36+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">안녕, 피츠버그 그리고 책</title><subtitle>An amazing website.</subtitle><author><name>Dennis' NA</name><email>4e65rv@gmail.com</email></author><entry><title type="html">@Autowired 가 없는 이유</title><link href="http://localhost:4000/springboot/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8/post/" rel="alternate" type="text/html" title="@Autowired 가 없는 이유" /><published>2020-08-21T21:26:28+09:00</published><updated>2020-08-21T21:26:28+09:00</updated><id>http://localhost:4000/springboot/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8/post</id><content type="html" xml:base="http://localhost:4000/springboot/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8/post/">&lt;p&gt;@Autowired 가 없는 이유는 빈을 주입받는 방식에
@Autowired setter 생성자 주입방식이 있는데
여기서는 Controller 와 Service 에서 lombok 의 @RequiredArgsConstructor 로 생성자 Bean 을 주입받기 때문에
Autowired 가 없다.
생성자를 직접 안쓰고 lombok 을 사용하는 이점은 해당 클래스의 의존성 관계가 변경될때마다 생성자코드를 계속해서 수정해야 하는 번거로움을
피하기 위해서이다.&lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;@RequiredArgsConstructor
@Service
public class PostsService {
    private final PostsRepository postsRepository;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Transactional
public Long save(PostsSaveRequestDto requestDto) {
    return postsRepository.save(requestDto.toEntity()).getId();
}

@Transactional
public Long update(Long id, PostsUpdateRequestDto requestDto) {
    Posts posts = postsRepository.findById(id)
            .orElseThrow(() -&amp;gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot;+ id));

    posts.update(requestDto.getTitle(), requestDto.getContent());

            return id;
}

public PostsResponseDto findById(Long id) {
    Posts entity = postsRepository.findById(id)
            .orElseThrow(() -&amp;gt; new IllegalArgumentException(&quot;해당 게시글이 없습니다. id=&quot; + id));
    return new PostsResponseDto(entity);
} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​```&lt;/p&gt;

&lt;p&gt;관련소스 참조: &lt;a href=&quot;https://github.com/b329/springboot2.git&quot;&gt;B329’s GitHub repo&lt;/a&gt;.&lt;/p&gt;</content><author><name>Dennis' NA</name><email>4e65rv@gmail.com</email></author><category term="springboot" /><category term="기술블로그" /><summary type="html">@Autowired 가 없는 이유는 빈을 주입받는 방식에 @Autowired setter 생성자 주입방식이 있는데 여기서는 Controller 와 Service 에서 lombok 의 @RequiredArgsConstructor 로 생성자 Bean 을 주입받기 때문에 Autowired 가 없다. 생성자를 직접 안쓰고 lombok 을 사용하는 이점은 해당 클래스의 의존성 관계가 변경될때마다 생성자코드를 계속해서 수정해야 하는 번거로움을 피하기 위해서이다.</summary></entry></feed>